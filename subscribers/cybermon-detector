#!/usr/bin/env python3

import json
import sys
import os
import cyberprobe.qcomms as q

if len(sys.argv) < 2:
    binding = "geo"
else:
    binding = sys.argv[1]
    
if len(sys.argv) < 3:
    output = "ioc"
else:
    output = "ioc"

stix = {}

stix_file = os.getenv("STIX_INDICATORS", "stix-default-combined.json")
mtime = 0

def check_config():

    global mtime
    global stix
    
    s = os.stat(stix_file).st_mtime
    if s != mtime:

        stix = {
            "index": {
                "email": {},
                "user_account": {},
                "hostname": {},
                "port": {},
                "url": {},
                "ipv4": {},
                "mac": {},
                "file": {},
                "hash": {}
            }
        }

        data = open(stix_file, "r").read()
        stix["configuration"] = json.loads(data)

        ind = stix["configuration"]["indicators"]
        for i in ind:
            o = i["observable"]["object"]["properties"]
            if o["xsi:type"] == "AddressObjectType":
                if o["category"] == "e-mail":
                    stix["index"]["email"][o["address_value"]] = i
                if o["category"] == "ipv4-addr":
                    stix["index"]["ipv4"][o["address_value"]] = i
                if o["category"] == "mac":
                    stix["index"]["mac"][o["address_value"]] = i
            elif o["xsi:type"] == "UserAccountObjectType":
                if o["domain"] and o["username"]:
	            ix = o["domain"] + "|" + o["username"]
	            stix["index"]["user_account"][ix] = i
            elif o["xsi:type"] == "HostnameObjectType":
                stix["index"]["hostname"][o["hostname_value"]] = i
            elif o["xsi:type"] == "PortObjectType":
                if o["port_value"] and o["layer4_protocol"]:
	            ix = o["layer4_protocol"]["value"] + ":" + str(o["port_value"])
	            stix["index"]["port"][ix] = i
            elif o["xsi:type"] == "URIObjectType":
                stix["index"]["url"][o["value"]] = i

        print("STIX data loaded.")
        mtime = s

def check_addresses(obj):

    ips = {}
    for v in obj["src"]:
        if v.startswith("ipv4"): ips[v[5:]] = True
    for v in obj["dest"]:
        if v.startswith("ipv4"): ips[v[5:]] = True

    for v in ips:
        if v in stix["index"]["ipv4"]:
            hit = stix["index"]["ipv4"][v]
            indicator = {
                "type": "ipv4",
                "value": v,
                "id": hit["id"],
                "description": hit["description"]
            }
            if "indicators" not in obj: obj["indicators"] = []
            obj["indicators"].append(indicator)

    ports = {}
    for v in obj["src"]:
        if v.startswith("tcp"): ports[v] = True
    for v in obj["dest"]:
        if v.startswith("tcp"): ports[v] = True

    for v in ports:
        if v in stix["index"]["port"]:
            hit = stix["index"]["port"][v]
            indicator = {
                "type": "tcp",
                "value": v,
                "id": hit["id"],
                "description": hit["description"]
            }
            if "indicators" not in obj: obj["indicators"] = []
            obj["indicators"].append(indicator)

    ports = {}
    for v in obj["src"]:
        if v.startswith("udp"): ports[v] = True
    for v in obj["dest"]:
        if v.startswith("udp"): ports[v] = True

    for v in ports:
        if v not in stix["index"]["port"]:
            hit = stix["index"]["port"][v]
            indicator = {
                "type": "udp",
                "value": v,
                "id": hit["id"],
                "description": hit["description"]
            }
            if "indicators" not in obj:: obj["indicators"] = []
            obj["indicators"].append(indicator)

def check_dns(obj):

    hosts = {}

    if "dns_message" in obj and "query" in obj["dns_message"]:
        for v in obj["dns_message"]["query"]:
            if "name" in v:
                hosts[v["name"]] = True
    if "dns_message" in obj and "answer" in obj["dns_message"]:
        for v in obj["dns_message"]["answer"]:
            if "name" in v:
                hosts[v["name"]] = True

    for v in hosts:
        if v in stix["index"]["hostname"]:
            hit = stix["index"]["hostname"][v]
            indicator = {
                "type": "hostname",
                "value": v,
                "id": hit["id"],
                "description": hit["description"]
            }
            if "indicators" not in not obj: obj["indicators"] = []
            obj["indicators"].append(indicator)

def check_url(obj):

    if "url" in obj:
        if obj["url"] in stix["index"]["url"]:
            hit = stix["index"]["url"][obj["url"]]
            indicator = {
                "type": "url",
                "value": obj["url"],
                "id": hit["id"],
                "description": hit["description"]
            }
            if "indicators" not in obj: obj["indicators"] = []
            obj["indicators"].append(indicator)

def check_email(obj):

    emails = {}
    if "smtp_data" in obj and "from" in obj["smtp_data"]:
        emails[obj["smtp_data"]["from"]] = True
    if "smtp_data" in obj and "to" in obj["smtp_data"]:
        for v in obj["smtp_data"]["to"]:
            emails[v] = True

    for v in emails:
        if v in stix["index"]["email"]:
            hit = stix["index"]["email"][v]
            indicator = {
                "type": "url",
                "value": v,
                "id": hit["id"],
                "description": hit["description"]
            }
            if "indicators" not int obj: obj["indicators"] = []
            obj["indicators"].append(indicator)

def handle(msg, output):
    obj = json.loads(msg)
    check_config()
    check_addresses(obj)
    check_dns(obj)
    check_url(obj)
    check_email(obj)
    output(json.dumps(obj))

try:
    q.subscribe(binding, handle, output)
except Exception as e:
    sys.stderr.write("Exception: %s\n" % str(e))

