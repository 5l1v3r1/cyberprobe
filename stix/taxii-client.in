#!/usr/bin/env python3

import sys
import argparse
import datetime
import dateutil.parser

import libtaxii as t
import libtaxii.messages_11 as tm11
import libtaxii.clients as tc
import libtaxii.taxii_default_query as tdq

sys.path.insert(1, '@pythondir@')

from cyberprobe.taxii_client import TaxiiClient
from cyberprobe import indicator

############################################################################
# Perform a TAXII poll
############################################################################

def perform_poll(args):

    client = TaxiiClient(args.host, args.port)

    last, pkgs = client.poll(query=args.query, 
                             collection=args.collection,
                             begin_ts=begin_ts, end_ts=end_ts)

    print("End timestamp:", last)

    # Process each content block
    for package in pkgs:
        
        # Dump package ID
        if package.id_:
            print("***** Package id: %s" % package.id_)
            
            # Dump package
            indicator.dump_package(package)

############################################################################
# Perform a TAXII discovery
############################################################################

def perform_discovery(args):

    # Create discovery request
    req = tm11.DiscoveryRequest(message_id=tm11.generate_message_id())

    # Convert to XML for request body
    req_xml = req.to_xml()

    # Create HTTP client
    client = tc.HttpClient()
    client.setProxy('noproxy') 

    # Call TAXII service, using the body
    resp = client.callTaxiiService2(args.host, args.path, t.VID_TAXII_XML_11,
                                    req_xml, args.port)

    # Get response
    resp = t.get_message_from_http_response(resp, '0')

    print(resp.to_xml())

############################################################################
# Perform a TAXII CollectionInformationRequest
############################################################################

def perform_collection_information(args):

    # Create discovery request
    msg_id=tm11.generate_message_id()
    req = tm11.CollectionInformationRequest(message_id=msg_id)

    # Convert to XML for request body
    req_xml = req.to_xml()

    # Create HTTP client
    client = tc.HttpClient()
    client.setProxy('noproxy') 

    # Call TAXII service, using the body
    resp = client.callTaxiiService2(args.host, args.path, t.VID_TAXII_XML_11,
                                    req_xml, args.port)

    # Get response
    resp = t.get_message_from_http_response(resp, '0')

    print(resp.to_xml())

############################################################################
# Perform a TAXII ManageCollectionSubscription with subscribe action
############################################################################

def perform_subscribe(args):

    client = TaxiiClient(args.host, args.port)

    subs_id = client.subscribe(collection=args.collection,
                               query=args.query,
                               inbox=args.inbox)

    print("Subscription:", subs_id)

############################################################################
# main body
############################################################################

# Parse command line arguments
p = argparse.ArgumentParser(description="TAXII Client")
p.add_argument("--host", dest="host", default="localhost", 
               help="Host where the Poll Service is hosted. "
               "Defaults to localhost.")
p.add_argument("--port", dest="port", default="8080", 
               help="Port where the Poll Service is hosted. Defaults to "
               "8080.")
p.add_argument("--path", dest="path", default="/", 
               help="Path where the Poll Service is hosted. Defaults to "
               "/.")
p.add_argument("--collection", dest="collection", default="default", 
               help="Data Collection to poll. Defaults to 'default'.")
p.add_argument("--begin_timestamp", dest="begin_ts", default=None, 
               help="The begin timestamp (format: "
               "YYYY-MM-DDTHH:MM:SS.ssssss+/-hh:mm) for the poll request. "
                   "Defaults to None.")
p.add_argument("--end_timestamp", dest="end_ts", default=None, 
               help="The end timestamp (format: "
               "YYYY-MM-DDTHH:MM:SS.ssssss+/-hh:mm) for the poll request. "
               "Defaults to None.")
p.add_argument("--discovery", "-d", dest="action", action="store_const",
               const="discovery", default=None, help="Discovery action")
p.add_argument("--poll", "-p", dest="action", action="store_const",
               const="poll", default=None, help="Poll action")
p.add_argument("--collection_information", "-c", dest="action", 
               action="store_const", const="collection_information", 
               default=None, help="Collection Information request")
p.add_argument("--subscribe", "-s", dest="action", 
               action="store_const", const="subscribe", 
               default=None, help="Subscribe request")
p.add_argument("--action", "-a", dest="act", default=None, 
               help="Subscription action")
p.add_argument("--query", "-q", dest="query", action="append",
               help="Query in form type:value.  Type can be one of: address, "
               "addresstype, hostname, port, hash, id, source. e.g. "
               "address:1.2.3.4 addresstype:e-mail port:11111.",
               default=None)
p.add_argument("--subs-id", "-Is", dest="subscription_id",
               help="Subscription ID", default=None)
p.add_argument("--inbox", dest="inbox", default="http://localhost:8888/", 
               help="URL where the subscription inbox Service is hosted. "
               "Defaults to http://localhost:8888/.")

args = p.parse_args()

# Parse date/time stuff.
try:
    if args.begin_ts:
        begin_ts = dateutil.parser.parse(args.begin_ts)
        if not begin_ts.tzinfo:
            raise ValueError
    else:
        begin_ts = None

    if args.end_ts:
        end_ts = dateutil.parser.parse(args.end_ts)
        if not end_ts.tzinfo:
            raise ValueError
    else:
        end_ts = None
except ValueError:

    print("Unable to parse timestamp value. Timestamp should include "
    "both date and time information along with a timezone or UTC offset "
    "(e.g., YYYY-MM-DDTHH:MM:SS.ssssss+/-hh:mm). Aborting poll.")
    sys.exit(1)

if args.action == None:
    print("An action must be specified (e.g. --poll).")
    sys.exit(1)

client = TaxiiClient(args.host, args.port)

if args.action == "poll":
    perform_poll(args)
elif args.action == "discovery":
    perform_discovery(args)
elif args.action == "collection_information":
    perform_collection_information(args)
elif args.action == "subscribe":
    perform_subscribe(args)

