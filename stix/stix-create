#!/usr/bin/env python3

#
# Converts a simple CSV input file into Indicators in a STIX document 
#
# Usage:
#   create <input> <output> [<id>]
# Where:
#   input: the input file
#   output: the output file
#   id: optional ID for the STIX document.
#
# Input file format, lines in one of these formats:
#   <id>,email,<description>,<email-address>
#   <id>,ipv4,<description>,<x.x.x.x>
#   <id>,mac,<description>,<x:x:x:x:x:x>
#   <id>,path,<description>,<filename>
#   <id>,hash,<description>,<MD5 hash>
#   <id>,domainname,<description>,<domainname>
#   <id>,port,<description>,<tcp|udp>:<portnum>
#   <id>,uri,<description>,<url>
#   <id>,user_account,<description>,<domain>:<username>
#

from stix.core import STIXPackage, STIXHeader
from cybox.core import Observable
from cybox.objects.address_object import Address, EmailAddress
from cybox.objects.file_object import File
from cybox.objects.domain_name_object import DomainName
from cybox.objects.port_object import Port
from cybox.objects.uri_object import URI
from cybox.objects.user_account_object import UserAccount
from stix.indicator import Indicator
from stix.common.information_source import InformationSource
from stix.common.identity import Identity
import sys
import csv
import argparse


############################################################################
# Helper functions to create different kinds of observable
############################################################################

def add_indicator(pkg, id, description, obj):
    i = Indicator()
    i.id_ = id
    i.description = description
    i.add_object(obj)
    pkg.add_indicator(i)

def create_email_observable(pkg, id, description, email):
    o = EmailAddress(email)
    add_indicator(pkg, id, description, o)

def create_ipv4_observable(pkg, id, description, ip):
    o = Address(ip, Address.CAT_IPV4)
    add_indicator(pkg, id, description, o)

def create_mac_observable(pkg, id, description, mac):
    o = Address(mac, Address.CAT_MAC)
    add_indicator(pkg, id, description, o)

def create_path_observable(pkg, id, description, path):
    o = File()
    o.full_path = path
    add_indicator(pkg, id, description, o)

def create_hash_observable(pkg, id, description, hash):
    o = File()
    o.add_hash(hash)
    o.md5 = True
    add_indicator(pkg, id, description, o)

def create_domainname_observable(pkg, id, description, domainname):
    o = DomainName()
    o.type_ = "FQDN"
    o.value = domainname
    add_indicator(pkg, id, description, o)

def create_port_observable(pkg, id, description, proto, port):
    o = Port()
    o.layer4_protocol = proto
    o.port_value = port
    add_indicator(pkg, id, description, o)

def create_uri_observable(pkg, id, description, uri):
    o = URI(uri)
    add_indicator(pkg, id, description, o)

def create_user_account_observable(pkg, id, description, domain, username):
    o = UserAccount()
    o.domain = domain
    o.username = username
    add_indicator(pkg, id, description, o)

############################################################################
# main body
############################################################################

p = argparse.ArgumentParser(description="STIX document creation")
p.add_argument(dest="input", nargs=1,
               help="Input file.")
p.add_argument(dest="output", nargs=1,
               help="Output file.")
p.add_argument("--id", "-i", dest="id", required=False,
               help="Document ID.")
p.add_argument("--source-id", "-s", dest="source_id", required=False,
               help="Source reference ID.")
args = p.parse_args()

# Parse arguments
input_file = args.input[0]
output_file = args.output[0]

# Create STIX header
header = STIXHeader()
header.add_package_intent("Indicators - Watchlist")

# Source ref
if args.source_id != None:
    ident=Identity(idref = args.source_id)
    src = InformationSource(identity=ident)
    header.information_source = src

# Create STIX package
package = STIXPackage()
package.stix_header = header
if args.id:
    package.id_ = args.id

row_count = 0

# Open input file, and parse CSV
input = open(input_file, 'r')
reader = csv.reader(input)
for row in reader:

    row_count = row_count + 1

    if row_count % 1000 == 0:
        print(row_count, "...")

    # Parser id
    id = row[0]
    del row[0]

    # Parse type
    type = row[0]
    del row[0]

    # Parse description
    description = row[0]
    del row[0]
    
    # Parse rest of row and create observable
    if type == 'email':
        create_email_observable(package, id, description, row[0])
    
    if type == 'ipv4':
        create_ipv4_observable(package, id, description, row[0])
    
    if type == 'mac':
        create_mac_observable(package, id, description, row[0])

    if type == 'path':
        create_path_observable(package, id, description, row[0])

    if type == 'hash':
        create_hash_observable(package, id, description, row[0])

    if type == 'domainname':
        create_domainname_observable(package, id, description, row[0])

    if type == 'port':
        parts = row[0].split(':')
        create_port_observable(package, id, description, parts[0], parts[1])

    if type == 'uri':
        create_uri_observable(package, id, description, row[0])

    if type == 'user_account':
        parts = row[0].split(':')
        create_user_account_observable(package, id, description, parts[0], 
                                       parts[1])

# Parsing complete, write object to output file
f = open(output_file, 'w')
f.write('<?xml version="1.0"?>')
f.write(package.to_xml())
f.close()

# All done, exit
sys.exit(0)

